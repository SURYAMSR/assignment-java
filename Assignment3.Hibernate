package com.te.assignment.dao;

import java.io.Serializable;
import java.util.List;
import java.util.Scanner;

import javax.persistence.*;

import com.te.assignment.dto.Student;

public class HibernateImplementation implements Serializable {
	Scanner scn = new Scanner(System.in);

	public void getById() {
		EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("StudentUnit01");
		EntityManager entityManager = entityManagerFactory.createEntityManager();

		System.out.println("Enter the id");
		int id = scn.nextInt();

		String query = "from Student where stuId=:IDENT ";
		Query query1 = entityManager.createQuery(query);
		query1.setParameter("IDENT", id);
		List resultList = query1.getResultList();
		for (Object object : resultList) {
			System.out.println(object);
		}
		return;

	}

	public void findAll() {
		EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("StudentUnit01");
		EntityManager entityManager = entityManagerFactory.createEntityManager();

		String query = "from Student";
		Query query_ = entityManager.createQuery(query);
		List resultList = query_.getResultList();
		for (Object object : resultList) {
			System.out.println(object);
		}
		return;

	}

	public void delete() {
		EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("StudentUnit01");
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		EntityTransaction entityTransaction = entityManager.getTransaction();
		System.out.println("enter the id to delete");
		int id = scn.nextInt();

		String query = "delete from Student where stuId=:IDENT";
		Query query1 = entityManager.createQuery(query);
		query1.setParameter("IDENT", id);

		entityTransaction.begin();
		int executeUpdate = query1.executeUpdate();
		System.out.println(executeUpdate+" row deleted");
		entityTransaction.commit();
		return;

	}

	public void insert() {
		EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("StudentUnit01");
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		EntityTransaction entityTransaction = entityManager.getTransaction();
		System.out.println("enter the name and phone number");
		String name = scn.next();
		long phone = scn.nextLong();

		Student student = new Student();
		student.setStuName(name);
		student.setStuPhone(phone);

		entityTransaction.begin();
		entityManager.persist(student);
		System.out.println("1 record inserted");
		entityTransaction.commit();
		return;

	}

	public void update() {
		EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("StudentUnit01");
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		EntityTransaction entityTransaction = entityManager.getTransaction();
		System.out.println("enter the name to be changed in the id");
		String name = scn.next();
		int id = scn.nextInt();

		String query = "update Student set stuName=:IDEN where stuId=:IDEN1";
		Query query1 = entityManager.createQuery(query);
		query1.setParameter("IDEN", name);
		query1.setParameter("IDEN1", id);

		entityTransaction.begin();
		int executeUpdate = query1.executeUpdate();
		System.out.println(executeUpdate+" row updated");
		entityTransaction.commit();
		return;
	}

}

package com.te.assignment.dao;

import java.sql.*;
import java.util.Scanner;

public class JDBCImplementation {
	Scanner scn = new Scanner(System.in);
	String url = "jdbc:mysql://localhost:3306/assignment";
	String user = "root";
	String password = "root";
	public void getById() {
		Connection connection=null;
		System.out.println("enter the id to fetch");
		int id=scn.nextInt();
		try {
			Class.forName("com.mysql.jdbc.Driver");
			try {
				connection = DriverManager.getConnection(url, user, password);
				String query = "select * from student where stu_id=?";
				PreparedStatement preparedStatement=connection.prepareStatement(query);
				preparedStatement.setInt(1, id);
				ResultSet res=preparedStatement.executeQuery();
				while(res.next()) {
					System.out.print(res.getInt(1)+ " ");
					System.out.print(res.getString(2)+ " ");
					System.out.println(res.getLong(3));
				}
				
			
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return;

	}

	public void findAll() {
		Connection connection=null;
		try {
			Class.forName("com.mysql.jdbc.Driver");
			
			try {
				connection = DriverManager.getConnection(url, user, password);
				String query = "select * from student";
				PreparedStatement preparedStatement=connection.prepareStatement(query);
				ResultSet res=preparedStatement.executeQuery(query);
				while(res.next()) {
					System.out.print(res.getInt(1)+ " ");
					System.out.print(res.getString(2)+ " ");
					System.out.println(res.getLong(3));
				}
				
			
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return;

	}

	public void delete() {
		Connection connection = null;
		System.out.println("enter the id to delete");
		int id = scn.nextInt();
		try {
			try {
				Class.forName("com.mysql.jdbc.Driver");
			} catch (ClassNotFoundException e1) {
				e1.printStackTrace();
			}
			try {
				connection = DriverManager.getConnection(url, user, password);
				String query = "delete from student where stu_id=?";
				PreparedStatement preparedStatement = connection.prepareStatement(query);
				preparedStatement.setInt(1, id);
				int execute = preparedStatement.executeUpdate();

				System.out.println(execute+" rows deleted");
			} catch (SQLException e) {
				e.printStackTrace();
			}

		}

		finally {
			try {
				connection.close();

			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return;

	}

	public void update() {
		Connection connection = null;
		System.out.println("enter the name to be changed in the id");
		String name = scn.next();
		int id=scn.nextInt();
		System.out.println(id);
		try {
			try {
				Class.forName("com.mysql.jdbc.Driver");
			} catch (ClassNotFoundException e1) {
				e1.printStackTrace();
			}
			try {
				connection = DriverManager.getConnection(url, user, password);
				String query = "update student set stu_name=? where stu_id=?";
				PreparedStatement preparedStatement = connection.prepareStatement(query);
				preparedStatement.setString(1, name);
				preparedStatement.setDouble(2, id);
				int execute = preparedStatement.executeUpdate();

				System.out.println(execute+" rows updated");
			} catch (SQLException e) {
				e.printStackTrace();
			}

		}

		finally {
			try {
				connection.close();

			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return;

	}


	public void insert() {
		Connection connection = null;
		System.out.println("enter the name and phone number");
		String name = scn.next();
		long phone = scn.nextLong();
		try {
			try {
				Class.forName("com.mysql.jdbc.Driver");
			} catch (ClassNotFoundException e1) {
				e1.printStackTrace();
			}
			try {
				connection = DriverManager.getConnection(url, user, password);
				String query = "insert into student(stu_name,stu_phone) values(?,?)";
				PreparedStatement preparedStatement = connection.prepareStatement(query);
				preparedStatement.setString(1, name);
				preparedStatement.setLong(2, phone);
				int execute = preparedStatement.executeUpdate();

				System.out.println(execute+" rows inserted");
			} catch (SQLException e) {
				e.printStackTrace();
			}

		}

		finally {
			try {
				connection.close();

			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return;

	}

}

package com.te.assignment.dto;

import java.io.Serializable;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import lombok.Data;

@Data
@Entity
@Table(name = "student")
public class Student implements Serializable {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "stu_id")
	private int stuId;

	@Column(name = "stu_name")
	private String stuName;
	
	@Column(name = "stu_phone")
	private long stuPhone;
		
}

package com.te.assignment.main;

import com.te.assignment.service.Implementation;

public class Main {
	public static void main(String[] args) {
		Implementation.implement();
	}

}

package com.te.assignment.service;

import java.util.Scanner;

import com.te.assignment.dao.HibernateImplementation;
import com.te.assignment.dao.JDBCImplementation;

public class Implementation {
	static Scanner scn = new Scanner(System.in);

	public static void implement() {
		System.out.println("choose implementation method hibernate/jdbc");
		String implementation = scn.next();
		if (implementation.equalsIgnoreCase("hibernate")) {
			System.out.println("select the following to perform on database");
			System.out.println("1-for fetching all records");
			System.out.println("2-for finding a record using id");
			System.out.println("3-for deleting records");
			System.out.println("4-for updating records");
			System.out.println("5-for inserting records");
			int inputFromUser = scn.nextInt();
			switch (inputFromUser) {
			case 1:
				HibernateImplementation hibernateImplementation1 = new HibernateImplementation();
				hibernateImplementation1.findAll();
				break;
			case 2:
				HibernateImplementation hibernateImplementation2 = new HibernateImplementation();
				hibernateImplementation2.getById();
				break;
			case 3:
				HibernateImplementation hibernateImplementation3 = new HibernateImplementation();
				hibernateImplementation3.delete();
				break;
			case 4:
				HibernateImplementation hibernateImplementation4 = new HibernateImplementation();
				hibernateImplementation4.update();
				break;
			case 5:
				HibernateImplementation hibernateImplementation5 = new HibernateImplementation();
				hibernateImplementation5.insert();
				break;

			default:
				System.out.println("Invalid Response");
				break;
			}
		}
		if (implementation.equalsIgnoreCase("jdbc")) {
			System.out.println("select the following to perform on database");
			System.out.println("1-for fetching all records");
			System.out.println("2-for finding a record using id");
			System.out.println("3-for deleting records");
			System.out.println("4-for updating records");
			System.out.println("5-for inserting records");
			int inputFromUser = scn.nextInt();
			switch (inputFromUser) {
			case 1:
				JDBCImplementation jdbcImplementation1 = new JDBCImplementation();
				jdbcImplementation1.findAll();
				break;
			case 2:
				JDBCImplementation jdbcImplementation2 = new JDBCImplementation();
				jdbcImplementation2.getById();
				break;
			case 3:
				JDBCImplementation jdbcImplementation3 = new JDBCImplementation();
				jdbcImplementation3.delete();
				break;
			case 4:
				JDBCImplementation jdbcImplementation4 = new JDBCImplementation();
				jdbcImplementation4.update();
				break;
			case 5:
				JDBCImplementation jdbcImplementation5 = new JDBCImplementation();
				jdbcImplementation5.insert();
				break;

			default:
				System.out.println("Invalid Response");
				break;
			}
		}

	}

}

<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence
          http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
	version="2.0">

	<persistence-unit name="StudentUnit01">
	<!-- ctrl+shift+T search for HibernatePersistenceProvider and open right click and copy qualified name -->
		<provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
		<class>com.te.assignment.dao.HibernateImplementation</class>
		<class>com.te.assignment.dao.JDBCImplementation</class>
		<properties>
		<!-- jdbc details -->
			<property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver"/>
			<property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/assignment"/>
			<property name="javax.persistence.jdbc.user" value="root"/>
			<property name="javax.persistence.jdbc.password" value="root"/>
		<!-- hibernate details -->	
			<property name="hibernate.hbm2ddl.auto" value="update"/>
			<property name="hibernate.show_sql" value="true"/>
			<property name="hibernate.format_sql" value="true"/>
			<property name="hibernate.dialect" value="org.hibernate.dialect.MySQL57Dialect"/>
		</properties>

	</persistence-unit>
</persistence>




